'use client'
import { useState, useRef, useEffect } from 'react';
import { FaFileAlt, FaDownload, FaTrash } from 'react-icons/fa';
import Script from 'next/script';
import Head from 'next/head';
import NavBar from '@/app/components/header/navbar';
import Footer from '@/app/components/footer/footer';

export default function WordCounter() {
  const [text, setText] = useState('');
  const [stats, setStats] = useState({
    wordCount: 0,
    characterCount: 0,
    characterCountNoSpaces: 0,
    sentenceCount: 0,
    paragraphCount: 0,
    readingTime: 0,
    mostCommonWords: []
  });
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState('');
  const [adsLoaded, setAdsLoaded] = useState(false);
  const textareaRef = useRef(null);

  // Calculate statistics when text changes
  useEffect(() => {
    if (text.trim() === '') {
      setStats({
        wordCount: 0,
        characterCount: 0,
        characterCountNoSpaces: 0,
        sentenceCount: 0,
        paragraphCount: 0,
        readingTime: 0,
        mostCommonWords: []
      });
      return;
    }

    setIsProcessing(true);
    
    // Use setTimeout to avoid blocking the UI with large texts
    const timer = setTimeout(() => {
      try {
        // Count characters (including spaces)
        const characterCount = text.length;
        
        // Count characters (excluding spaces)
        const characterCountNoSpaces = text.replace(/\s+/g, '').length;
        
        // Count words (split by whitespace and filter out empty strings)
        const words = text.trim().split(/\s+/).filter(word => word.length > 0);
        const wordCount = words.length;
        
        // Count sentences (split by . ! ? and filter out empty strings)
        const sentences = text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0);
        const sentenceCount = sentences.length;
        
        // Count paragraphs (split by newlines and filter out empty strings)
        const paragraphs = text.split(/\n+/).filter(paragraph => paragraph.trim().length > 0);
        const paragraphCount = paragraphs.length;
        
        // Calculate reading time (assuming 225 words per minute)
        const readingTime = Math.ceil(wordCount / 225);
        
        // Find most common words
        const wordFrequency = {};
        words.forEach(word => {
          const cleanWord = word.toLowerCase().replace(/[^\w]/g, '');
          if (cleanWord && cleanWord.length > 2) { // Ignore short words
            wordFrequency[cleanWord] = (wordFrequency[cleanWord] || 0) + 1;
          }
        });
        
        // Get top 5 most common words
        const mostCommonWords = Object.entries(wordFrequency)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 5)
          .map(([word, count]) => ({ word, count }));
        
        setStats({
          wordCount,
          characterCount,
          characterCountNoSpaces,
          sentenceCount,
          paragraphCount,
          readingTime,
          mostCommonWords
        });
        setError('');
      } catch (err) {
        console.error('Error calculating stats:', err);
        setError('Failed to process text. Please try again.');
      } finally {
        setIsProcessing(false);
      }
    }, 100);
    
    return () => clearTimeout(timer);
  }, [text]);

  // Handle file upload
  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    // Check file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      setError('File size exceeds 5MB limit');
      return;
    }
    
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        setText(e.target.result);
        setError('');
      } catch (err) {
        console.error('Error reading file:', err);
        setError('Failed to read file. Please try a different file.');
      }
    };
    reader.onerror = () => {
      setError('Failed to read file. Please try again.');
    };
    reader.readAsText(file);
  };

  // Download results as text file
  const downloadResults = () => {
    const content = `Word Count Analysis Results:
    
Original Text Preview: ${text.length > 100 ? text.substring(0, 100) + '...' : text}

Word Count: ${stats.wordCount}
Character Count (with spaces): ${stats.characterCount}
Character Count (without spaces): ${stats.characterCountNoSpaces}
Sentence Count: ${stats.sentenceCount}
Paragraph Count: ${stats.paragraphCount}
Estimated Reading Time: ${stats.readingTime} minute(s)

Most Common Words:
${stats.mostCommonWords.map(item => `- ${item.word}: ${item.count} times`).join('\n')}

Generated by Word Counter Tool
    `;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'word_count_results.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Clear all text
  const clearText = () => {
    setText('');
    setError('');
  };

  // Initialize ads
  useEffect(() => {
    if (adsLoaded && window.adsbygoogle) {
      try {
        window.adsbygoogle = window.adsbygoogle || [];
        window.adsbygoogle.push({}); // Top ad
        window.adsbygoogle.push({}); // Bottom ad
        if (text) {
          window.adsbygoogle.push({}); // Middle ad
        }
      } catch (e) {
        console.error('AdSense ad push failed:', e);
      }
    }
  }, [adsLoaded, text]);

  return (
    <>
      <NavBar/>
      <div className="p-6 bg-gray-100">
        <Head>
          <title>Word Counter - Text Analysis Tool</title>
          <meta name="description" content="Count words, characters, sentences and analyze your text" />
        </Head>
        
        <Script 
          id="adsbygoogle-init"
          strategy="afterInteractive"
          src={`https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXXXXXXXXXXXXXX`}
          crossOrigin="anonymous"
          onLoad={() => setAdsLoaded(true)}
          onError={(e) => console.error('AdSense script failed to load', e)}
        />
        
        <div className="mx-3 md:mx-10 lg:mx-18">
          <div className="flex items-center mb-6">
            <a href="/tools" className="text-blue-600 hover:underline">‚Üê Back to all tools</a>
          </div>

          {/* Top Ad Unit */}
          <div className="mb-8">
            <ins
              className="adsbygoogle"
              style={{ display: 'block' }}
              data-ad-client="ca-pub-XXXXXXXXXXXXXXXX"
              data-ad-slot="YOUR_TOP_AD_SLOT"
              data-ad-format="auto"
              data-full-width-responsive="true"
            ></ins>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-md">
            <div className="flex items-center mb-6">
              <FaFileAlt className="text-blue-500 text-3xl mr-3" />
              <h1 className="text-2xl font-bold">Word Counter</h1>
            </div>

            {error && (
              <div className="mb-4 p-3 bg-red-50 border border-red-200 text-red-600 rounded">
                {error}
              </div>
            )}

            <div className="mb-6">
              <div className="flex justify-between items-center mb-2">
                <label htmlFor="text-input" className="font-medium">
                  Paste your text below or upload a file:
                </label>
                <div className="flex space-x-2">
                  <label className="cursor-pointer text-blue-500 hover:text-blue-700 text-sm flex items-center">
                    <FaFileAlt className="mr-1" />
                    Upload TXT File
                    <input
                      type="file"
                      className="hidden"
                      accept=".txt,.text"
                      onChange={handleFileUpload}
                    />
                  </label>
                  {text && (
                    <button
                      onClick={clearText}
                      className="text-red-500 hover:text-red-700 text-sm flex items-center"
                    >
                      <FaTrash className="mr-1" />
                      Clear
                    </button>
                  )}
                </div>
              </div>
              
              <textarea
                ref={textareaRef}
                id="text-input"
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder="Type or paste your text here..."
                className="w-full h-64 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none resize-none"
              />
              
              <div className="flex justify-between text-sm text-gray-500 mt-1">
                <span>{stats.characterCount} characters</span>
                <span>{stats.wordCount} words</span>
              </div>
            </div>

            {/* Middle Ad Unit */}
            {text && (
              <div className="my-6">
                <ins
                  className="adsbygoogle"
                  style={{ display: 'block' }}
                  data-ad-client="ca-pub-XXXXXXXXXXXXXXXX"
                  data-ad-slot="YOUR_MIDDLE_AD_SLOT"
                  data-ad-format="auto"
                  data-full-width-responsive="true"
                ></ins>
              </div>
            )}

            {/* Statistics */}
            {text && (
              <div className="mt-6">
                <h3 className="font-bold text-lg mb-4">Text Analysis Results</h3>
                
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
                  <div className="bg-blue-50 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-blue-700">{stats.wordCount}</div>
                    <div className="text-sm text-blue-600">Words</div>
                  </div>
                  
                  <div className="bg-green-50 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-green-700">{stats.characterCount}</div>
                    <div className="text-sm text-green-600">Characters (with spaces)</div>
                  </div>
                  
                  <div className="bg-purple-50 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-purple-700">{stats.characterCountNoSpaces}</div>
                    <div className="text-sm text-purple-600">Characters (no spaces)</div>
                  </div>
                  
                  <div className="bg-yellow-50 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-yellow-700">{stats.sentenceCount}</div>
                    <div className="text-sm text-yellow-600">Sentences</div>
                  </div>
                  
                  <div className="bg-red-50 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-red-700">{stats.paragraphCount}</div>
                    <div className="text-sm text-red-600">Paragraphs</div>
                  </div>
                  
                  <div className="bg-indigo-50 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-indigo-700">{stats.readingTime}</div>
                    <div className="text-sm text-indigo-600">Minutes to read</div>
                  </div>
                </div>
                
                {/* Most Common Words */}
                {stats.mostCommonWords.length > 0 && (
                  <div className="mb-6">
                    <h4 className="font-medium mb-2">Most Frequent Words:</h4>
                    <div className="flex flex-wrap gap-2">
                      {stats.mostCommonWords.map((item, index) => (
                        <div key={index} className="bg-gray-100 px-3 py-1 rounded-full text-sm">
                          {item.word} <span className="text-gray-500">({item.count})</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                <div className="flex justify-center">
                  <button
                    onClick={downloadResults}
                    className="px-5 py-2 bg-blue-500 text-white rounded-md font-medium hover:bg-blue-600 transition-colors inline-flex items-center gap-2"
                  >
                    <FaDownload size={14} />
                    Download Results
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Bottom Ad Unit */}
          <div className="mt-8">
            <ins
              className="adsbygoogle"
              style={{ display: 'block' }}
              data-ad-client="ca-pub-XXXXXXXXXXXXXXXX"
              data-ad-slot="YOUR_BOTTOM_AD_SLOT"
              data-ad-format="auto"
              data-full-width-responsive="true"
            ></ins>
          </div>
          
          <div className="bg-gradient-to-r from-[#25609A] to-[#52aa4d] mt-5 rounded-xl p-8 text-center text-white">
            <h2 className="text-2xl md:text-3xl font-bold mb-4">Ready to Grow Your Business?</h2>
            <p className="mb-6 max-w-2xl mx-auto">
              Let's discuss how we can help you achieve your digital goals and take your business to the next level.
            </p>
            <a 
              href="/contact" 
              className="inline-block bg-white text-[#25609A] px-6 py-3 rounded-md font-medium hover:bg-gray-100 transition-colors"
            >
              Get in Touch
            </a>
          </div>
        </div>
      </div>
      <Footer/>
    </>
  );
}